/// Prisma Generator Client
/// This section is used to specify the Prisma Client settings.
/// The provider is set to "prisma-client-js" to use the Prisma Client for JavaScript and TypeScript.
generator client {
  provider = "prisma-client-js"
}

/// Prisma Datasource DB
/// This section is used to specify the database connection settings.
/// The provider is set to "postgresql" to use the PostgreSQL database.
/// The url is set to the "DATABASE_URL" environment variable which should contain the connection string to the PostgreSQL database.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Mandatory for NextAuth to work
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RateLimiterFlexible {
  key     String    @id
  points  Int
  expire  DateTime?
  blocked Boolean?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

/// Model definitions
model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  emailVerified DateTime?
  name          String?
  phone         String?
  address       String?
  avatar_key    String?
  userType      UserTypes? @default(ADMIN)
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  isPremium     Boolean?   @default(false)

  kitchens      Kitchen[]
  kitchenUsers  KitchenUser[]
  recipeBooks   RecipeBook[]
  dishsTypes    DishsType[]
  checkTemps    CheckTemp[]
  suppliers     Supplier[]
  notifications Notification[]
  ingredients   Ingredient[]
  contacts      Contact[]
  menus         Menu[]

  /// For NextAuth
  accounts Account[]

  @@index([email])
}

model Kitchen {
  id            String @id @default(cuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  name          String
  costObjective Int    @default(20)
  description   String

  kitchenRoles    KitchenRole[]
  kitchenUsers    KitchenUser[]
  checkTemps      CheckTemp[]
  contactKitchens ContactKitchen[]
  menuKitchens    MenuKitchen[]

  @@unique([userId, name])
}

model KitchenRole {
  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String
  role      String

  @@id([kitchenId, role])
}

model KitchenUser {
  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  role RoleName

  @@id([kitchenId, userId])
}

model Supplier {
  id          String  @id @default(cuid())
  name        String
  prompt      String?
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  @@unique([userId, name])
}

model SupplierSupported {
  id          String  @id @default(cuid())
  name        String  @unique
  phoneNumber String?
  prompt      String?
  description String?

  // For dev part
  isPublic Boolean @default(false)
}

model Ingredient {
  id           String @id @default(cuid())
  name         String
  price        Float
  unit         Unit
  category     String
  origin       String
  supplierName String

  // supplier    Supplier    @relation(fields: [supplierId], references: [id])
  // supplierId  String
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  recipeIngredients RecipeIngredient[]

  @@unique([name, supplierName, userId])
}

model RecipeBook {
  id          String @id @default(cuid())
  name        String
  description String
  user        User   @relation(fields: [userId], references: [id])
  userId      String

  recipes Recipe[]

  @@unique([name, userId])
}

model Recipe {
  id            String     @id @default(cuid())
  versionNumber String     @default("1.0.0")
  name          String
  recipeBook    RecipeBook @relation(fields: [recipeBookId], references: [id])
  recipeBookId  String

  recipeState     RecipeState @default(RECIPE)
  preparationTime Int
  cookingTime     Int
  description     String

  steps String

  cost  Float
  yield Float
  unit  Unit

  objInvestment Float @default(20)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  recipeAllergens  RecipeAllergen[]
  recipePhotos     RecipePhoto[]
  recipe           RecipeIngredient[] @relation("recipe")
  recipeIngredient RecipeIngredient[] @relation("ingredient")
  menuRecipes      MenuRecipe[]
}

model RecipeIngredient {
  id       Int    @id @default(autoincrement())
  recipe   Recipe @relation("recipe", fields: [recipeId], references: [id])
  recipeId String

  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String?

  recipeIngredient   Recipe? @relation("ingredient", fields: [recipeIngredientId], references: [id])
  recipeIngredientId String?

  quantity Float
  unit     Unit

  @@unique([recipeId, ingredientId, recipeIngredientId])
}

model RecipeAllergen {
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  recipeId String
  allergen Allergen

  @@id([recipeId, allergen])
}

model RecipePhoto {
  id String @id @default(cuid())

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
  photo    String

  @@unique([recipeId, photo])
}

model Menu {
  id String @id @default(cuid())

  name        String  @unique
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  description String?
  cost        Float

  menuKitchens MenuKitchen[]
  menuRecipes  MenuRecipe[]

  @@unique([name, userId])
}

model MenuRecipe {
  id Int @id @default(autoincrement())

  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  type  String
  order Int

  @@unique([recipeId, menuId])
}

model MenuKitchen {
  id        String  @id @default(cuid())
  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String

  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String

  @@unique([kitchenId, menuId])
}

model DishsType {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  type   String

  @@unique([userId, type])
}

model DishsTypeSupported {
  id   String @id @default(cuid())
  type String

  @@unique([type])
}

model Contact {
  id String @id @default(cuid())

  user         User    @relation(fields: [userId], references: [id])
  userId       String
  name         String
  description  String?
  phoneNumber  String
  compteNumber String?

  contactKitchens ContactKitchen[]

  @@unique([userId, name, phoneNumber])
}

model ContactKitchen {
  id String @id @default(cuid())

  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String

  @@unique([contactId, kitchenId])
}

model CheckTemp {
  id String @id @default(cuid())

  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  date DateTime @default(now())
  temp Float
}

model Notification {
  id      String     @id @default(cuid())
  content String
  type    NotifTypes
  user    User       @relation(fields: [userId], references: [id])
  userId  String
  read    DateTime?
}

/// Enums
enum NotifTypes {
  OPENAI_RETURN
  UPDATE_RECIPE
  GENERAL_UPDATE
}

enum RoleName {
  Chef
  Sous_chef
  Chef_partie
  Tournant
  Commis
  Plongeur
}

enum Unit {
  G
  ML
  KG
  L
  UN
  LB
  PORTION
  CUP
  OZ
  TBSP
  TSP
}

enum Allergen {
  LACTOSE
  GLUTEN
  PEANUT
  NUT
  EGG
  FISH
  CRUSTACEAN
  MOLLUSCS
  SOY
  SULPHISTES
  MUSTARD
}

enum UserTypes {
  ADMIN
  MEMBER
  DEV
}

enum ActionMapaq {
  PLANK_BLUE
  PLANK_RED
  PLANK_YELLOW
  COOL_QUICKLY
}

enum RecipeState {
  RECIPE
  DISH
}
