// ---- Mandatory for compatibility ---- //
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- Mandatory for NextAuth ---- // 

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


// -------- // 


// ---- enum ---- //
enum UnitMeasure {
  G
  ML
  PORTION
  CUP
  OZ
  TBSP
  TSP
  LBS
}

enum Alergen {
  LACTOSE
  GLUTEN
  PEANUT
  NUT
  EGG
  FISH
  CRUSTACEAN
  MOLLUSCS
  SOY
  SULPHISTES
  MUSTARD
}

enum UserTypes {
  ADMIN
  MEMBER
  DEV
}

enum ActionMapaq {
  PLANK_BLUE
  PLANK_RED
  PLANK_YELLOW
  COOL_QUICKY
}

enum RecipeState {
  RECIPE
  DISH
}

// ---- model ---- //
model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  firstName  String?
  name       String?
  phone      String?
  address    String?
  avatar_key String?
  isVerified Boolean?   @default(false)
  userType   UserTypes? @default(ADMIN)
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt

  kitchens    Kitchen[]

  // For NextAuth //
  accounts   Account[]
}

model Kitchen {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  
  name            String   @unique
  costObjective   Int      @default(20)
  kitchenRoles    KitchenRole[]
}

model KitchenRole {
  kitchen Kitchen @relation(fields: [kitchenId], references: [id])
  kitchenId String
  role      String

  @@id([kitchenId, role])
}



