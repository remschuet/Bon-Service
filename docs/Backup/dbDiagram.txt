enum NotifType {
  "OPENAI_RETURN"
  "UPDATE_RECIPE"
  "GENERAL_UPDATE"
}

enum UnitMeasure {
  "G"
  "ML"
  "KG"
  "L"
  "UN"
  "LB"
  "PORTION"
  "CUP"
  "OZ"
  "TBSP"
}

enum ActionMapaq {
  "Plank-Blue"
  "Plank-Red"
  "Plank-Yellow"
  "Cool Quickly"
}

enum Alergen {
  "LACTOSE"
  "GLUTEN"
  "PEANUT"
  "NUT"
  "EGG"
  "FISH"
  "CRUSTACEAN"
  "MOLLUSCS"
  "SOY"
  "SULPHISTES"
  "MUSTARD"
}

enum UserType {
  "ADMIN"
  "MEMBER"
  "DEV"
}

Enum RecipeState{
  /*FIXE*/
  "RECIPE"
  "DISH"
}

Table User {
  id int [pk]
  eMail varchar unique
  password varchar
  /*optional*/
  name varchar
  userType UserType
  phone varchar
  adress varchar
  is_verfied bool [default : false]
  avatar_key int [ref: > Avatar.key]
  created_at Date [default: 0] /*NOW()*/
  updated_at Date
  isPremium bool [default: false]
}

Table Kitchen {
  /*user_admin and name unique together*/
  id int [pk]
  user int [ref: > User.id, unique] 
  name varchar unique
  costObjective int [default: 20]
}

Table KitchenRole {
  /*kitchen and role unique together*/
  kitchen int [ref: > Kitchen.id, pk]
  role varchar [pk]
}

Table KitchenUser {
  cuisine int [ref: > Kitchen.id]
  user int [ref: > User.id]
  role varchar
}

Table SupplierSupported{
  /*dev*/
  id int [pk]
  name varchar
  description varchar
  phoneNumber varchar
  prompt varchar
  /*portion dev*/
  isPublic bool [default: false]
}

Table Supplier{
  id int [pk]
  name varchar
  description varchar
  prompt varchar
  user int [ref: > User.id]
}

Table Notification {
  id int [pk]
  content varchar
  notifType NotifType 
  reciver int [ref: > User.id]
  read Data [default: 0]
}

Table Ingredient {
  /*unique (user, name, supplierName)*/
  id int [pk]
  name varchar
  price float 
  unit UnitMeasure
  category varchar
  origin varchar
  supplierName varchar
  user int [ref: > User.id]
}

Table RecipeBook {
  /*name and userAdmin unique together*/
  id int [pk]
  name varchar [unique]
  user int [ref: > User.id, unique]
}

/*Not implemented*/
Table RecipeArchive {
  id int [pk]
}

Table RecipeCategory {
  /*user and category unique together*/
  user int [ref: > User.id, pk]
  category varchar [pk]
}

Table Recipe { 
  /*name maybe unique*/
  id int [pk]
  versionNumber int [default: 0]
  name varchar
  recipeBook int [ref: > RecipeBook.id]
  category int [ref: > RecipeCategory.category]
  recipeState RecipeState
  preparationTimeMin int
  cookingTimeMin int
  
  yield Float
  unitMeasure UnitMeasure
  
  dateAdded date [default: 0] /*NOW()*/
  objInvestment float 

  createdAt date
  updatedAt Date
}

Table RecipeIngredient {
  recipe int [ref: > Recipe.id]
  ingredient int /*non obligatoire*/
  recipeIngredient int /*non obligatoire*/
  yield float
  unit UnitMeasure
}

Table RecipeAllergen {
  recipe int [ref: > Recipe.id]
  alergen Alergen
}

Table RecipePhoto {
  recipe int [ref: > Recipe.id]
  photo int [ref: > Photo.key]
}

Table Menu {
  id int [pk]
  name varchar [unique]
  user int [ref: > User.id]
  isPublic bool [default: false]
}

/* link between all the recipe in a menu*/
Table MenuRecipe {
  id int [pk]
  menu int [ref:> Menu.id]
  recipe int [ref:> Recipe.id]
}


/* link between the kitchen where a menu is public */
Table MenuKitchen {
  id int [pk]
  kitchen int [ref: > Kitchen.id]
  menu int [ref: > Menu.id]
}

Table structMenu {
  /*userAdmin and category unique together*/
  /*category example: starter, main, dessert*/
  user int [ref: > User.id, pk]
  category varchar [pk]
}

Table Contact {
 /*When yield add, create to phone book*/ 
  id int [pk]
  user int [ref: > User.id]
  name varchar
  description varchar
  phoneNumber varchar
  /*portion admin*/
  compteNumber varchar
}

Table ContactKitchen {
  id int [pk]
  kitchen int [ref: > Kitchen.id]
  contact int [ref: > Contact.id]
}

Table CheckTemp {
  id int [pk]
  kitchen int [ref: > Kitchen.id]
  user int [ref: > User.id]
  date date [default: 1] // NOW()
  temp float
}


/* S3 */
Table Avatar {
  key int [pk]
  value varchar
}

Table Photo {
  key int [pk]
  value varchar
}

Table Video {
  key int [pk]
  value varchar
}